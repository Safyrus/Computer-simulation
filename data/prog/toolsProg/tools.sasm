####################===[GENERAL]===#########################
#
# +--------------+
# | ver: 0.1.0.1 |
# | by : Safyrus |
# +--------------+
#
#
# Devices adresses:
#   0000 - 7FFF : DISK
#   8000 - D7FF : RAM
#   D800 - DFFF : IO
#   E000 - FFFF : VRAM
#
#
# memory map:
# 80 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF
# 0x [F_P] [F_L] [VAR STACK]
# 1x [RTN] [ SAVE ABCDE ] [] [   SYSTEM_REGISTER   ]
# 2x [                DEVICE ADRESS                ]
# 3x [                DEVICE ADRESS                ]
# 4x [SCRN][CURS][C_A][CO]
# 5x
# 6x
# ..
#
# other memory location are alocated in SYST_INIT (like function stack)
#
############################################################


###################===[FUNCTIONS]===########################
#
# register use for function:
#   IN : A-F = param
#   OUT: E   = error
#        ??? = return
#
############################################################

#####################===[ANNEX]===##########################
#
# MEMORY:
#
# F_P  = Function pointer
# F_L  = Function stack length (where it end)
# RTN  = Subroutine callback
# SCRN = screen location
# CURS = cursor position for characters
# C_A  = cursor adress
# CO   = color for the front and the back of characters
#
#
# FUNCTION:
# SYST_... = Start of all functions of this program
#
############################################################


####################===[DEVICES]===#########################
#
# CODE:
#   00 - no device
#   01 - DISK
#   02 - RAM
#   03 - KEYBOARD
#   04 - SCREEN
#   05 - TIMER
#
# memory:
# devices adresses are represented by an array of pair(code, start adress)
#
############################################################


#####################===[ERROR]===##########################
#
# 01 = function stack full
# 02 = function stack empty
# 03 = variable stack full
# 04 = variable stack empty
# 05 = can't push in variable stack
# 06 = can't pop in variable stack
# 07 = device not found
# 08 = no driver found
#
############################################################

JMP $F :SYST_INIT
#import things #
@prog/toolsProg/toolsData.sasm
@prog/toolsProg/tools16bits.sasm
@prog/toolsProg/toolsDevice.sasm
@prog/toolsProg/toolsFunction.sasm
@prog/toolsProg/toolsGraphics.sasm
@prog/toolsProg/toolsStack.sasm


###############
#    INIT     #
###############
SYST_INIT:

    # function stack
    SET 81 80 00
    SET 00 80 01
    SET 81 80 02
    SET 1F 80 03

    # general variable stack
    SET 81 80 04
    SET 20 80 05
    SET 81 80 06
    SET 20 80 07
    SET 81 80 08
    SET 2A 80 09

    ###devices adresses###
    # number of devices
    SET 06 80 20
    # max number of devices
    SET 0A 80 21
    # DISK
    SET 01 80 22
    SET 00 80 23
    SET 00 80 24
    # RAM
    SET 02 80 25
    SET 80 80 26
    SET 00 80 27
    # EMPTY
    SET 00 80 28
    SET D8 80 29
    SET 00 80 2A
    # KEYBOARD
    SET 03 80 2B
    SET DF 80 2C
    SET FE 80 2D
    # SCREEN
    SET 04 80 2E
    SET E0 80 2F
    SET 00 80 30
    # TIMER
    SET 05 80 31
    SET DF 80 32
    SET FD 80 33

    # save screen location
    SET E0 80 40
    SET 00 80 41
    # cursor position
    SET 00 80 42
    SET 00 80 43
    # cursor adress
    SET E0 80 44
    SET 00 80 45
    # char color
    SET F0 80 46

###############
#  MAIN LOOP  #
###############
SYST_MAIN:

    SYST_MAIN_TEST_CHAR:
        GET $A DF FE
        CMP $A 00
        JMP 04 :SYST_MAIN_TEST_CHAR

        JMP $F :SYST_GRAPHICS_DRAW_CHAR

        JMP $F :SYST_MAIN_TEST_CHAR

    SYST_MAIN_TIMER:
        SYST_MAIN_TIMER_INIT:
            SET 00 82 00
            SET 40 82 01
            MOV $A 05
            JMP $F :SYST_DEV_GET_ADR
            SET $A 82 02
            SET $B 82 03
            SET 1F 82 04

            MOV $G0 00

        SYST_MAIN_TIMER_CHECK:
            GET $A 82 02
            GET $B 82 03
            GET $C $A $B
            GET $D 82 04
            CMP $D $C
            AND $F $F 0E
            JMP 04 :SYST_MAIN_TIMER_UPDATE
            JMP $F :SYST_MAIN_TIMER_CHECK

        SYST_MAIN_TIMER_UPDATE:
            ADD $D $D 20
            SET $D 82 04
            SYST_MAIN_TIMER_ERASE:
                GET $A 82 00
                GET $B 82 01
                MOV $C 00
                JMP $F :SYST_GRAPHICS_DRAW_PIX
            SYST_MAIN_TIMER_MOVE:
                GET $A 82 00
                GET $B 82 01

                ADD $A $A 01
                SET $A 82 00
            SYST_MAIN_TIMER_DRAW:
                MOV $C 0F
                JMP $F :SYST_GRAPHICS_DRAW_PIX
            ADD $G0 $G0 01
            JMP $F :SYST_MAIN_TIMER_CHECK

    SYST_MAIN_TEST_SCREEN:
        MOV $A 00
        MOV $B 00
        MOV $C 0A
        JMP $F :SYST_GRAPHICS_DRAW_PIX

        MOV $A 01
        MOV $B 00
        MOV $C 09
        JMP $F :SYST_GRAPHICS_DRAW_PIX

        MOV $A 00
        MOV $B 01
        MOV $C 0B
        JMP $F :SYST_GRAPHICS_DRAW_PIX

        MOV $G2 00

        MOV $G1 00
        SYST_MAIN_TEST_SCREEN_DO_X:
            CMP $G1 80
            AND $F $F 0E
            JMP 04 :SYST_MAIN_TEST_SCREEN_DONE_X

            MOV $G0 00
            SYST_MAIN_TEST_SCREEN_DO_Y:
                CMP $G0 80
                AND $F $F 0E
                JMP 04 :SYST_MAIN_TEST_SCREEN_DONE_Y

                # insert param
                MOV $A $G1
                MOV $B $G0
                MOD $C $G2 10
                #call function
                JMP $F :SYST_GRAPHICS_DRAW_PIX

                ADD $G2 $G2 01

                ADD $G0 $G0 01
                JMP $F :SYST_MAIN_TEST_SCREEN_DO_Y
            SYST_MAIN_TEST_SCREEN_DONE_Y:

            ADD $G2 $G2 01

            ADD $G1 $G1 01
            JMP $F :SYST_MAIN_TEST_SCREEN_DO_X
        SYST_MAIN_TEST_SCREEN_DONE_X:
        OFF

    SYST_MAIN_TEST_DEVICE_TRANSMIT:
        # YOU NEED TO PRESS A KEY #
        MOV $A 00
        JMP $F :SYST_DEV_TRANSMIT
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR

        MOV $A 01 #actually, no driver for the disk is install
        JMP $F :SYST_DEV_TRANSMIT
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR

        SYST_MAIN_TEST_DEVICE_TRANSMIT_KEY:
        MOV $A 03
        JMP $F :SYST_DEV_TRANSMIT
        CMP $D 61
        JMP 04 :SYST_MAIN_STOP
        JMP $F :SYST_MAIN_TEST_DEVICE_TRANSMIT_KEY

    SYST_MAIN_TEST_DEVICE:
        # save general registers
        JMP $F :SYST_PUSH_GENERAL
        CMP $E 00
        JMP 02 :SYST_MAIN_ERROR

        # insert param
        MOV $A 02

        #call function
        JMP $F :SYST_DEV_GET_ADR

        #restor general registers
        JMP $F :SYST_POP_GENERAL

        MOV $F 00
        CMP $A 80
        AND $F $F FE
        JMP 04 :SYST_MAIN_NEXT1
        MOV $E 81
        JMP $F :SYST_MAIN_ERROR

        SYST_MAIN_NEXT1:
        CMP $B 00
        AND $F $F FE
        JMP 04 :SYST_MAIN_NEXT2
        MOV $E 82
        JMP $F :SYST_MAIN_ERROR

        SYST_MAIN_NEXT2:
        MOV $A 02
        JMP $F :SYST_DEV_GET_LENGTH
        CMP $A 58
        AND $F $F 0E
        JMP 04 :SYST_MAIN_NEXT3
        MOV $E 83
        JMP $F :SYST_MAIN_ERROR

        SYST_MAIN_NEXT3:
        CMP $B 00
        AND $F $F FE
        JMP 04 :SYST_MAIN_STOP
        MOV $E 84
        JMP $F :SYST_MAIN_ERROR

    SYST_MAIN_TEST_STACK_GENERAL:
        # STACK NEED TO BE OF SIZE 10 #
        MOV $G0 11
        MOV $G1 22
        MOV $G2 33
        MOV $G3 44
        MOV $G4 55
        MOV $G5 66
        JMP $F :SYST_PUSH_GENERAL
        CMP $E 00
        JMP 02 :SYST_MAIN_ERROR
        JMP $F :SYST_PUSH_GENERAL
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR

        MOV $G0 00
        MOV $G1 00
        MOV $G2 00
        MOV $G3 00
        MOV $G4 00
        MOV $G5 00
        JMP $F :SYST_POP_GENERAL
        CMP $E 00
        JMP 02 :SYST_MAIN_ERROR
        JMP $F :SYST_POP_GENERAL
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR
        OFF

    SYST_MAIN_TEST_STACK:
        # STACK NEED TO BE OF SIZE 4 #
        MOV $A 01
        JMP $F :SYST_STACK_PUSH
        CMP $E 00
        JMP 02 :SYST_MAIN_ERROR
        MOV $A 02
        JMP $F :SYST_STACK_PUSH
        MOV $A 03
        JMP $F :SYST_STACK_PUSH
        MOV $A 04
        JMP $F :SYST_STACK_PUSH
        MOV $A 05
        JMP $F :SYST_STACK_PUSH
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR
        JMP $F :SYST_STACK_POP
        CMP $A 04
        JMP 04 :SYST_MAIN_TESTP
        MOV $E 81
        JMP $F :SYST_MAIN_ERROR
        SYST_MAIN_TESTP:
        JMP $F :SYST_STACK_POP
        JMP $F :SYST_STACK_POP
        JMP $F :SYST_STACK_POP
        JMP $F :SYST_STACK_POP
        CMP $E 00
        JMP 04 :SYST_MAIN_ERROR
        OFF

    SYST_MAIN_TEST_16_ADD:
        # 16 BIT ADD TEST #
        MOV $A 10
        MOV $B FF
        MOV $C 02
        MOV $D 48
        JMP $F :SYST_16_ADD
        CMP $A 13
        AND $F $F FE
        JMP 04 :MAIN_YES_1
        MOV $E 81
        JMP $F :SYST_MAIN_ERROR
        MAIN_YES_1:
        CMP $B 47
        AND $F $F FE
        JMP 04 :SYST_MAIN_STOP
        MOV $E 82
        JMP $F :SYST_MAIN_ERROR

    SYST_MAIN_STOP:
        OFF
    SYST_MAIN_ERROR:
        JMP $F :SYST_MAIN_ERROR


###############
#  SUBROUTINE #
###############

SYST_REG_SAVE:
    SET $A 80 12
    SET $B 80 13
    SET $C 80 14
    SET $D 80 15
    SET $E 80 16
    JMP $F $J1 $J2

SYST_REG_LOAD:
    GET $A 80 12
    GET $B 80 13
    GET $C 80 14
    GET $D 80 15
    GET $E 80 16
    JMP $F $J1 $J2
