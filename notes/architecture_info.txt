-=[ S257-xx ASSEMBLY LANGUAGE ]=-

##INSTRUCTION SET##
HEX	MEM DST SRC VAL     DESCRIPTION
---#---#---#---#---#-----------------------------------
00	NOP	 \	 \	 \
01	RST	 \	 \	 \
02	OFF	 \	 \	 \
03	MOV	DST	SRC			DST = SRC
04	MOV	DST	VAL			DST = VAL
05	CMP	 \	SR1	SR2		COMPARE SR1 TO SR2 AND SET FLAG
06	CMP	 \	VA1	SR2		COMPARE VA1 TO SR2 AND SET FLAG
07	CMP	 \	SR1	VA2		COMPARE SR1 TO VA2 AND SET FLAG
08	CMP	 \	VA1	VA2		COMPARE VA1 TO VA2 AND SET FLAG
10	ADD	DST	SR1	SR2		DST = SR1 + SR2
11	ADC	DST	SR1	SR2		DST = SR1 + SR2 + 1
12	SUB	DST	SR1	SR2		DST = SR1 - SR2
13	SBB	DST	SR1	SR2		DST = SR1 - SR2 - 1
14	MUL	DST	SR1	SR2		DST = SR1 * SR2
15	DIV	DST	SR1	SR2		DST = SR1 / SR2
16	MOD	DST	SR1	SR2		DST = SR1 % SR2
17	AND	DST	SR1	SR2		DST = SR1 & SR2
18	OR	DST	SR1	SR2		DST = SR1 | SR2
19	XOR	DST	SR1	SR2		DST = SR1 ^ SR2
20	ADD	DST	VA1	SR2		DST = VA1 + SR2
21	ADC	DST	VA1	SR2		DST = VA1 + SR2 + 1
22	SUB	DST	VA1	SR2		DST = VA1 - SR2
23	SBC	DST	VA1	SR2		DST = VA1 - SR2 - 1
24	MUL	DST	VA1	SR2		DST = VA1 * SR2
25	DIV	DST	VA1	SR2		DST = VA1 / SR2
26	MOD	DST	VA1	SR2		DST = VA1 % SR2
27	AND	DST	VA1	SR2		DST = VA1 & SR2
28	OR	DST	VA1	SR2		DST = VA1 | SR2
29	XOR	DST	VA1	SR2		DST = VA1 ^ SR2
30	ADD	DST	SR1	VA2		DST = SR1 + VA2
31	ADC	DST	SR1	VA2		DST = SR1 + VA2 + 1
32	SUB	DST	SR1	VA2		DST = SR1 - VA2
33	SBC	DST	SR1	VA2		DST = SR1 - VA2 - 1
34	MUL	DST	SR1	VA2		DST = SR1 * VA2
35	DIV	DST	SR1	VA2		DST = SR1 / VA2
36	MOD	DST	SR1	VA2		DST = SR1 % VA2
37	AND	DST	SR1	VA2		DST = SR1 & VA2
38	OR	DST	SR1	VA2		DST = SR1 | VA2
39	XOR	DST	SR1	VA2		DST = SR1 ^ VA2
40	ADD	DST	VA1	VA2		DST = VA1 + VA2
41	ADC	DST	VA1	VA2		DST = VA1 + VA2 + 1
42	SUB	DST	VA1	VA2		DST = VA1 - VA2
43	SBC	DST	VA1	VA2		DST = VA1 - VA2 - 1
44	MUL	DST	VA1	VA2		DST = VA1 * VA2
45	DIV	DST	VA1	VA2		DST = VA1 / VA2
46	MOD	DST	VA1	VA2		DST = VA1 % VA2
47	AND	DST	VA1	VA2		DST = VA1 & VA2
48	OR	DST	VA1	VA2		DST = VA1 | VA2
49	XOR	DST	VA1	VA2		DST = VA1 ^ VA2
50	JMP	SRC	RAM_ADR		JUMP TO RAM_ADR(REG REG) IF REG=FLAG_REG
51	JMP	SRC	RAM_ADR		JUMP TO RAM_ADR(VAL REG) IF REG=FLAG_REG
52	JMP	SRC	RAM_ADR		JUMP TO RAM_ADR(REG VAL) IF REG=FLAG_REG
53	JMP	SRC	RAM_ADR		JUMP TO RAM_ADR(VAL VAL) IF REG=FLAG_REG
54	JMP	VAL	RAM_ADR		JUMP TO RAM_ADR(REG REG) IF VAL=FLAG_REG
55	JMP	VAL	RAM_ADR		JUMP TO RAM_ADR(VAL REG) IF VAL=FLAG_REG
56	JMP	VAL	RAM_ADR		JUMP TO RAM_ADR(REG VAL) IF VAL=FLAG_REG
57	JMP	VAL	RAM_ADR		JUMP TO RAM_ADR(VAL VAL) IF VAL=FLAG_REG
60	GET DST	RAM_ADR		DST = MEMORY(REG REG)
61	GET DST	RAM_ADR		DST = MEMORY(VAL REG)
62	GET DST	RAM_ADR		DST = MEMORY(REG VAL)
63	GET DST	RAM_ADR		DST = MEMORY(VAL VAL)
64	SET SRC	RAM_ADR		MEMORY(REG REG) = SRC
65	SET SRC	RAM_ADR		MEMORY(VAL REG) = SRC
66	SET SRC	RAM_ADR		MEMORY(REG VAL) = SRC
67	SET SRC	RAM_ADR		MEMORY(VAL VAL) = SRC
68	SET VAL	RAM_ADR		MEMORY(REG REG) = VAL
69	SET VAL	RAM_ADR		MEMORY(VAL REG) = VAL
6a	SET VAL	RAM_ADR		MEMORY(REG VAL) = VAL
6b	SET VAL	RAM_ADR		MEMORY(VAL VAL) = VAL


##FLAG##
xxxxLEGC
X
X
X
X
Lesser
Equal
Greater
Carry


##SPECIAL_REG##
PC(16)
RNG(8)
FLAG(8)
JUMPBACK(16)


##NORMAL_REG##
A(8)
B(8)
C(8)
D(8)
